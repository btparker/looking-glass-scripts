#!/usr/bin/env python
#
# Take a set of view images and place them in a single standard quilt image.
#
# https://forum.lookingglassfactory.com/t/combining-32-views/501/2
# The views go from the bottom left as the leftmost view, to the top right being the furthest right
# E.g. for a 4x8 quilt:
#
# 28  29  30  31
# 24  25  26  27
# 20  21  22  23
# 16  17  18  19
# 12  13  14  15
#  8   9  10  11
#  4   5   6   7
#  0   1   2   3
#
#
# Copyright (c) 2019, SURFsara BV
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of SURFsara BV nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL SURFSARA BV BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys, random, colorsys, os
from PIL import Image, ImageDraw
import argparse



def parse_args():
    parser = argparse.ArgumentParser(description='Create a Looking Glass Quilt file')
    parser.add_argument('--file-pattern', '-fp', type=str, help='Target files pattern, such as "render/foo.{:04d}.{:02d}.png"', required=True)
    parser.add_argument('--output', '-o', type=str, help='Output filename and path of desired file', required=True)
    parser.add_argument('--tiles-h', '-th', type=int, help='Number of tiles, horizontal', default=8)
    parser.add_argument('--tiles-v', '-tv', type=int, help='Number of tiles, vertical', default=6)
    parser.add_argument('--video', action='store_true')
    parser.add_argument('--tile-first', '-tf', type=int, help='Index of the first tile', default=0)
    parser.add_argument('--frame-first', '-ff', type=int, help='Index of the first frame', default=1)
    parser.add_argument('--frame-last', '-fl', type=int, help='Index of the last frame', default=1)
    parser.add_argument('--frames-per-second', '-fps', type=int, help='Frames per second for video', default=24)

    args = parser.parse_args()
    return args

# def usage():
#     print('usage: %s <quilt-image> <tiles-h> <tiles-v> <file-pattern> <tile-first> <tile-last> <frame-first> <frame-last>' % sys.argv[0])
#     print()
#     sys.exit(-1)


def main():
    args = parse_args()

    # Open a tile image to get resolution
    if args.video:
        image_file = args.file_pattern.format(args.frame_first, args.tile_first)
    else:
        image_file = args.file_pattern.format(args.tile_first)

    print("Image open: " + image_file)
    tile_img = Image.open(image_file)

    tile_w, tile_h = tile_img.size

    quilt_w = tile_w * args.tiles_h
    quilt_h = tile_h * args.tiles_v

    print('Quilt size based on tile dimensions and count: %d x %d' % (quilt_w, quilt_h))

    # https://www.geeksforgeeks.org/smallest-power-of-2-greater-than-or-equal-to-n/
    def nextPowerOf2(n):
        count = 0;
        # First n in the below
        # condition is for the
        # case where n is 0
        if (n and not(n & (n - 1))):
            return n

        while( n != 0):
            n >>= 1
            count += 1

        return 1 << count

    # quilt_w = nextPowerOf2(quilt_w)
    # quilt_h = nextPowerOf2(quilt_h)
    # print('Quilt size: %d x %d' % (quilt_w, quilt_h))

    for frame in range(args.frame_first, args.frame_last + 1):
        outimg = Image.new('RGB', (quilt_w, quilt_h))

        tile_idx = args.tile_first
        tile_top = quilt_h - tile_h

        for j in range(args.tiles_v):

            tile_left = 0

            for i in range(args.tiles_h):
                tile_img_path = args.file_pattern.format(frame, tile_idx)

                tile_img = Image.open(tile_img_path)
                outimg.paste(tile_img, (tile_left, tile_top))

                tile_idx += 1
                tile_left += tile_w

            tile_top -= tile_h

        outimg.save("{}.{}.jpg".format(args.output, str(frame).zfill(4)))

    if args.video:
        ffmpeg_cmd = "ffmpeg -r {} -i {}.%04d.jpg -c:v libx264 -crf 10 -pix_fmt yuv420p -y {}.mp4".format(
            args.frames_per_second,
            args.output,
            args.output,
        )
        print("Executing '{}'".format(ffmpeg_cmd))
        os.system(ffmpeg_cmd)

if __name__ == "__main__":
    main()
